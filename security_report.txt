Security Audit Report

Date: 2025-08-08

**1. Hardcoded Secret Key**

*   **File:** `app/core/config.py`
*   **Line:** 5
*   **Vulnerability:** The `SECRET_KEY` is hardcoded in the source code. This is a major security risk as it can be easily extracted from the code repository.
*   **Code Snippet:**
    ```python
    SECRET_KEY: str = "your-super-secret-key-change-this-in-production"
    ```
*   **Recommendation:** The secret key should be loaded from an environment variable or a secure vault, not stored in the code.

**2. Use of Insecure JWT Algorithm**

*   **File:** `app/core/config.py`
*   **Line:** 6
*   **Vulnerability:** The application uses the "HS256" algorithm for JWTs. This is a symmetric algorithm, which means the same key is used for both signing and verifying tokens. If the key is compromised, an attacker can forge tokens.
*   **Code Snippet:**
    ```python
    ALGORITHM: str = "HS256"
    ```
*   **Recommendation:** Use an asymmetric algorithm like "RS256" or "ES256" where a private key is used to sign tokens and a public key is used to verify them.

**3. Lack of Input Sanitization on File Upload**

*   **File:** `app/api/routers/files.py`
*   **Line:** 30
*   **Vulnerability:** The filename from the uploaded file is used directly to construct the file path. This could lead to a path traversal vulnerability if a malicious filename like `../../etc/passwd` is provided.
*   **Code Snippet:**
    ```python
    db_file = await file_service.save_file_async(db, file, ttl, current_user.id, is_public_bool)
    ```
*   **Recommendation:** Sanitize the filename to remove any directory traversal characters. It's better to generate a new, random filename and store the original filename in the database.

**4. Potential for SQL Injection**

*   **File:** `app/api/routers/auth.py`
*   **Line:** 21
*   **Vulnerability:** The username is used directly in a database query. While SQLAlchemy provides some protection against SQL injection, it's not always foolproof, especially with complex queries.
*   **Code Snippet:**
    ```python
    user = db.query(User).filter(User.username == form_data.username).first()
    ```
*   **Recommendation:** Always use parameterized queries or prepared statements to prevent SQL injection vulnerabilities.

**5. Insecure Default Permissions on Uploaded Files**

*   **File:** `app/api/routers/files.py`
*   **Line:** 30
*   **Vulnerability:** The `is_public` flag for uploaded files is determined by a form field. This could be manipulated by an attacker to make a sensitive file public.
*   **Code Snippet:**
    ```python
    is_public: str = Form("false"),
    ```
*   **Recommendation:** The default for `is_public` should be `False` and should be explicitly set by the user. The API should not trust the client to set this value.

**6. Cross-Site Scripting (XSS) in Error Messages**

*   **File:** `app/api/routers/auth.py`
*   **Line:** 90
*   **Vulnerability:** The error message is rendered directly in the template. If the error message contains user-supplied input, it could lead to a reflected XSS vulnerability.
*   **Code Snippet:**
    ```python
    "error": f"Registration failed: {str(e)}",
    ```
*   **Recommendation:** Always escape any user-supplied input that is rendered in an HTML response. Use a templating engine that provides automatic escaping, like Jinja2, and ensure it is configured correctly.

**7. Missing CSRF Protection**

*   **File:** `app/api/routers/auth.py`, `app/api/routers/files.py`
*   **Vulnerability:** The web routes that handle form submissions (e.g., `/register-web`, `/login-web`, `/upload`) do not appear to have CSRF protection. This could allow an attacker to trick a user into submitting a malicious request.
*   **Recommendation:** Implement CSRF protection on all state-changing web routes. This can be done by generating a unique token for each user session and including it as a hidden field in every form.

**8. Unrestricted File Types**

*   **File:** `app/core/config.py`
*   **Line:** 13
*   **Vulnerability:** The `ALLOWED_EXTENSIONS` list is very permissive, allowing executable files like `.exe`, `.msi`, `.deb`, and `.rpm`. This could allow an attacker to upload malicious files that could be executed on the server or by other users.
*   **Code Snippet:**
    ```python
    ALLOWED_EXTENSIONS: str = ".jpg,.jpeg,.png,.gif,.bmp,.tiff,.webp,.svg,.ico,.pdf,.txt,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.zip,.rar,.mp4,.7z,.tar,.gz,.mp3,.mp4,.avi,.mov,.wmv,.flv,.mkv,.webm,.wav,.ogg,.aac,.csv,.json,.xml,.html,.css,.js,.py,.java,.cpp,.c,.h,.php,.sql,.md,.rtf,.odt,.ods,.odp,.epub,.mobi,.psd,.ai,.eps,.dwg,.dxf,.stl,.obj,.fbx,.blend,.iso,.dmg,.exe,.msi,.deb,.rpm,.tar.xz,.tar.bz2,.avi,.mkv,.m4v,.3gp,.flac,.m4a,.wma"
    ```
*   **Recommendation:** Restrict the allowed file types to only those that are absolutely necessary for the application to function. Do not allow executable files.

**9. Use of Weak MD5 Hash**

*   **File:** `app/utils/chunked_upload.py`
*   **Line:** 166
*   **Vulnerability:** The application uses the MD5 hash algorithm to generate upload IDs. MD5 is a weak hashing algorithm that is known to have collisions.
*   **Code Snippet:**
    ```python
    return hashlib.md5(data.encode()).hexdigest()
    ```
*   **Recommendation:** Replace the MD5 hash algorithm with a stronger one like SHA-256.

**10. Use of `try, except, pass`**

*   **Files:** `app/api/routers/files.py`, `app/services/file_service.py`, `app/utils/chunked_upload.py`
*   **Vulnerability:** The code uses `try, except, pass` blocks, which can hide errors and make debugging difficult.
*   **Recommendation:** Handle exceptions more explicitly by logging the error or showing a message to the user.